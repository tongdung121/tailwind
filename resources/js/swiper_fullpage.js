import Swiper from "swiper/bundle";
import "swiper/css/bundle";

// Swiper ngo√†i (fullpage d·ªçc)
const outerSwiper = new Swiper(".mySwiperOuter", {
    direction: "vertical",
    mousewheel: true,
    speed: 800,
    pagination: {
        el: ".swiper-pagination",
        clickable: true,
    },
});

setTimeout(() => {
    $("#loading").css("display", "none");
    const swiperThumbs3 = new Swiper(".mySwiperThumbs3", {
        spaceBetween: 10,
        slidesPerView: 4,   // üëâ s·ªë ·∫£nh nh·ªè t·ªëi ƒëa hi·ªÉn th·ªã
        freeMode: true,
        watchSlidesProgress: true,
    });

    const swiperFull3 = new Swiper(".mySwiperFull3", {
        loop: true,
        speed: 1500,
        // effect: 'fade', // üëà m·ªù m∆∞·ª£t thay v√¨ l∆∞·ªõt c·ª©ng
        fadeEffect: {
            crossFade: true, // üëà chuy·ªÉn m∆∞·ª£t gi·ªØa ·∫£nh c≈© v√† m·ªõi
        },
        autoplay: {
            delay: 3000,
            disableOnInteraction: false,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        // pagination: {
        //     el: '.swiper-pagination',
        //     clickable: true,
        // },
        thumbs: {
            swiper: swiperThumbs3,
        },
    });
}, 3500);

// outerSwiper ph·∫£i ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc
// v√≠ d·ª•: const outerSwiper = new Swiper(".mySwiperOuter", { direction: 'vertical', mousewheel: true, ... });

document.querySelectorAll('.text-scrollable').forEach(el => {
    // ƒë·∫£m b·∫£o CSS: .text-scrollable { overflow-y: auto; max-height: 100vh; }
    el.addEventListener('wheel', function (e) {
        // ch·ªâ x·ª≠ l√Ω tr∆∞∆°ÃÅc khi c√≥ scroll d·ªçc
        if (el.scrollHeight <= el.clientHeight) {
            // kh√¥ng c√≥ overflow -> cho ph√©p outer swiper x·ª≠ l√Ω
            return;
        }

        const delta = e.deltaY;
        const atTop = el.scrollTop === 0;
        const atBottom = (el.scrollTop + el.clientHeight) >= (el.scrollHeight - 1);

        // n·∫øu ƒëang cu·ªôn l√™n v√† v·∫´n ch∆∞a t·ªõi tr√™n c√πng => consume event (text scroll)
        if (delta < 0 && !atTop) {
            e.stopPropagation();    // ngƒÉn outerSwiper nh·∫≠n event
            return;
        }

        // n·∫øu ƒëang cu·ªôn xu·ªëng v√† v·∫´n ch∆∞a t·ªõi ƒë√°y => consume event (text scroll)
        if (delta > 0 && !atBottom) {
            e.stopPropagation();
            return;
        }

        // n·∫øu ·ªü edge (top/bottom) => ƒë·ªÉ event lan ra, outerSwiper s·∫Ω nh·∫≠n v√† chuy·ªÉn section
        // (kh√¥ng c·∫ßn e.preventDefault, cho outerSwiper th·ª±c hi·ªán)
    }, { passive: false });
})

const header = document.getElementById("header");
const mySwiperOuter = document.querySelector('.mySwiperOuter');

const vh = window.innerHeight;
if (header) {
    const headerHeight = header.offsetHeight;
    if (mySwiperOuter) {
        mySwiperOuter.style.setProperty('height', `calc(100vh - ${headerHeight}px)`, 'important');
        const newHeight = vh - headerHeight;
        const imageEls = mySwiperOuter.querySelectorAll('.image');
        if (imageEls.length) {
            const rightColWidth = mySwiperOuter.querySelector('.right-col').offsetWidth;
            const ratio = rightColWidth / newHeight;
            imageEls.forEach(imageEl => {
                imageEl.style.setProperty('aspect-ratio', ratio, 'important');
            });
        }
    }
} else {
    if (mySwiperOuter) {
        const imageEls = mySwiperOuter.querySelectorAll('.image');
        if (imageEls.length) {
            const rightColWidth = mySwiperOuter.querySelector('.right-col').offsetWidth;
            const ratio = rightColWidth / vh;
            imageEls.forEach(imageEl => {
                imageEl.style.setProperty('aspect-ratio', ratio, 'important');
            });
        }
    }
}
